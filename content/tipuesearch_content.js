var tipuesearch = {"pages": [{'title': '目錄', 'text': '心得: \n 這個課程讓我學習到如何架構網站，也學習很多沒看過的單字，雖然說很多知識我都需要別人轉達很多次，我才能理解，雖然學程是對我來說有困難，但我願意學習，也謝謝老師這一學期的指導，讓我懂了一些些概念，接下來我會更加努力學習，我會繼續加油。 \n', 'tags': '', 'url': '目錄.html'}, {'title': '課程單字', 'text': '9/14 \n git 工具 \n distributed 分散式 \n remote 遠端 \n Python 電腦語言 \n oriented 以...為主 \n repository 倉庫；倉儲 \n monitor 螢幕 \n 9/28 \n initialize 起始化 \n master branch 主分支 \n 10/5 \n \\t = = tab 隔開 \n \\n 跳行 next line \n row 列 (左右) \n column 行 (上下) \n back slash 反斜線 \\ \n slash / \n duplicate = copy \n destination 目的地；目標 \n path 路徑；目錄 \n fatal 致命問題 (嚴重問題) \n configuration file 設定檔案 \n routine 常規；例行公事 \n process 過程 \n git status 狀態 \n untracked 未追蹤 \n 11/2 \n specifying 指定 \n reconcile 調和 \n divergent 分散 \n merge 合併 \n fetch 抓 \n strategy 策略 \n', 'tags': '', 'url': '課程單字.html'}, {'title': 'homework1', 'text': '', 'tags': '', 'url': 'homework1.html'}, {'title': 'UNIT1', 'text': '', 'tags': '', 'url': 'UNIT1.html'}, {'title': 'Succeeding in PC Hardware', 'text': '\n PC Hardware is an online course, where the content will be presented in the form of both text and activities. \n \xa0\xa0 PC Hardware是一門線上的課程，其中的內容將以文本和活動的形式呈現。 \n While you will have more flexibility than in a traditional course, you will also have more responsibility for your own learning. You will need to: \n \xa0\xa0 與傳統課程做比較，你將擁有更多的靈活性，但是你也將對自己的學習承擔更多責任，你必須 需要： \n \n Plan how to work through each unit. \n \n \xa0 \xa0 \xa0 \xa0 \xa0 透過每個單元計畫如何工作。 \n \n Determine how to use the various features of the course to help you learn. \n \n \xa0 \xa0 \xa0 \xa0 \xa0 判斷怎麼使用課程的各種功能來幫助自己學習。 \n \n Decide when you need to seek additional support. \n \n \xa0 \xa0 \xa0 \xa0 \xa0 確定在你需要的時候尋求其他支援。 \n What \xa0 You Need to Know About the Course \n \xa0你 需要了解的課程內容 \n This course contains multiple modules. Each module has features designed to support you as an independent learner, including: \n \xa0 本課程包含多個模塊。 每個模塊均具有在支援你作為獨立學習者的功能，包括： \n \n Learning Objectives: \xa0 These are descriptions of what you should be able to do at the end of a section. A Learning Objective will allow you to direct your learning efforts and enable you to monitor your progress as you explore the content and engage in the activities. \n \n \xa0 \xa0 \xa0 \xa0 \xa0\xa0 學習目標： 這些是本章節最後描述的事情。學習目標會使你能夠指引學習努力，並且在探討內容和\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 參與活動時監控學習進度。 \n \n Explanatory Content: \xa0 This is the informational “meat” of every chapter. Consisting of short passages of text with information, examples, images, and explanations, this explanatory content contains pieces such as: \n \n \xa0 \xa0 \xa0 \xa0 解釋性內容： 這是每個章節的信息性“ 內容 ”。 由每個資訊及簡短的段落，例如，圖片和說明組成，此\xa0 \xa0 \xa0 \xa0 \xa0 說明性內容包含以下內容： \xa0 \n \n Walk-throughs: \xa0 These are videos embedded in the pages to exemplify the concepts you are exploring. They may provide a more detailed explanation of a topic or guide you through the steps of a process. \n \n \xa0 \xa0 \xa0 \xa0 練習： 這些是嵌入在頁面中的視頻，以例證明你正在探討的概念。 他們可能會提供有關主題的更詳\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 細的說明，或指引你完成流程的各個步驟。 \n \n Examples: \xa0 Designed to illustrate specific applications of the skills and learning objectives that the course supports you to achieve. \n \n \xa0 \xa0 \xa0 \xa0 舉例說明： 在說明該課程支援你實現的技能和學習目標的特定應用。 \n \n Labs: \xa0 Simulations and lab activities designed to give you an opportunity to interact with various hardware elements. \n \n \xa0 \xa0 \xa0 \xa0 實驗室： 模擬和實驗室活動在為你提供與各種硬體元件進行交換的機會。 \n \n Many Students Wonder sidebars: \xa0 These sidebars serve two purposes: (1) to give a quick review of concepts, such as "highly specialized input devices," that are used in the PC Hardware material and (2) to provide additional material or background information that you may find surprising and interesting but that is not going to be assessed in the Quiz. \n \n \xa0 \xa0 \xa0 \xa0 \xa0許多學生都想知道側邊欄： 這些側邊欄有兩個目的：（1）快速回顧邏輯概念，例如PC硬體材料中\xa0 \xa0 \xa0 \xa0 \xa0 \xa0使用的“高度專業化的輸入設備”，以及（2）提供其他材料或背景信息你可能會覺得令人驚訝和有趣\xa0 \xa0 \xa0 \xa0 \xa0 \xa0的東西，但是測驗中不會對此進行評估評測。 \n \n Learning Activities: \xa0 There are different types of activities interspersed throughout the course. They include: \n \n \xa0 \xa0 \xa0 \xa0 \xa0學習活動： 在整個課程中散發著不同類型的活動。 它們包括： \xa0 \n \n Learn By Doing activities: \xa0 Learn By Doing activities follow the short explanations and examples. These activities give you the chance to investigate and practice key ideas. Learn By Doing activities have hints and feedback to guide you if you need it. \n \n \xa0 \xa0 \xa0 \xa0 邊做邊學的活動： 邊做邊 學的活動依照簡短的說明和例子。 這些活動讓你有機會研究和實踐觀念思\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 想。 邊做邊學活動有提示和反饋，以在需要時指引你。 \n \n Did I Get This? activities: \xa0 Did I Get This? activities are your chance to do a quick "self-check." These activities do not have hints, and often follow a Learn by Doing activity so that you can determine if you understand the key ideas. This will help you make sure you are ready for graded activities. \n \n \xa0 \xa0 \xa0 \xa0\xa0 我明白了嗎？活動： 我明白了嗎？活動是你進行快速“自我檢查”的機會。這些活動沒有提示，通常\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 跟隨“邊做邊學”活動，方便你確定自己是否了解觀念思想。這將幫助你確保已準備好進行分級活動。 \n \n Quizzes: \xa0 These are short assignments that are graded. There is a Quiz at the end of each Module. The Quiz will show you and your instructor how well you understand the key concepts. If you read the information and do the activities in each Module, you should be ready for the Quiz. \n \n \xa0 \xa0 \xa0 \xa0 \xa0測驗： 這些是評分的短期作業。 每個模塊的章節最後都有一個測驗。 測驗將會向你和你的老師展示\xa0 \xa0 \xa0 \xa0 \xa0 \xa0你對關鍵概念的理解程度。 如果你閱讀了該訊息並在每個模塊中進行了活動，那麼你應該已經做好\xa0 \xa0 \xa0 \xa0 \xa0 \xa0測驗的準備。 \n \n Metacognitive Activities: \xa0 These activities are designed to support your development as an independent learner, encouraging you to reflect on your progress and plan for continuing success. These activities include: \n \n \xa0 \xa0 \xa0 \xa0 元認知活動： 這些活動在支援你作為獨立學習者的發展，鼓勵你反向思考自己的進步並計劃繼續取\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 得成功。 這些活動包括： \n \n My Response activities: \xa0 These short activities are located at the end of the module; they encourage you to reflect on your progress through the module and estimate how well you believe you\'ve attained the module\'s learning objectives. These activities also provide a place to share continuing questions and areas of difficulty (if you\'re using the course in conjunction with an instructor, your questions will be shared with your instructor). \n \n \xa0 \xa0 \xa0 \xa0 \xa0我的響應活動： 這些簡短的活動位於模塊的章節最後 ；他們鼓勵你反向思考本單元的學習進度，並\xa0 \xa0 \xa0 \xa0 \xa0 \xa0估計你認為自己達到本單元學習目標的程度。這些活動還提供了一個分享繼續存在的問題和困難領\xa0 \xa0 \xa0 \xa0 \xa0 \xa0域的地方(如果你與講師一起使用本課程,你的問題將與講師分享與討論）。 \n \n Checkpoints: \xa0 These activities are located across the course after sections of content that can be particularly challenging or require additional practice. These metacognitive \xa0 checkpoints encourage you to review your progress so far and assess yourself: are you ready to continue, or do you believe you need additional materials, practice, or self-assessment? If you feel that you\'re not ready to proceed, these checkpoints provide links to additional learning materials. \n \n \xa0 \xa0 \xa0 \xa0 檢查點： 這些活動位於課程的各個部分之後，這些部分可能特別具有挑戰性或需要其他練習。 這些\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 元認知 檢查點可以 鼓勵你回顧從之前到現在的進展並進行自我評估：你準備好繼續嗎，還是你認為\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 你需要其他材料，練習或自我評估？ 如果你感覺還沒有準備好繼續，這些檢查點提供了指向其他學\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 習資料的連接。 \n', 'tags': '', 'url': 'Succeeding in PC Hardware.html'}, {'title': 'UNIT5', 'text': '', 'tags': '', 'url': 'UNIT5.html'}, {'title': 'PCH 19\xa0 Notebook Power and Physical Security', 'text': '\xa0 \n Overview 概述 In this module on notebooks, we will discuss the various types of batteries used in notebook and laptop computers, along with battery construction, battery care, and various power level indicators. We will also discuss the variety of power sources a notebook has access to, including its battery, AC adapter, and docking stations. Next, we will discuss the proper disposal procedures that should be used when someone upgrades or breaks their notebook. Finally, we will discuss the physical security of notebooks. We will look at the construction of these devices, as well as the proper installation of the security cable and how it is connected to the notebook. \n 在筆記型電腦上的模塊中，我們會討論筆記型電腦和筆記型電腦中使用的各種不同類型的電池，以及電池結構，電池維護和各種電量的指示器。我們還會討論筆記型電腦可以使用的各種電源，包括電池，AC適配器和擴展塢。再來，我們又會討論當有人升級或破壞筆記型電腦時應使用的正確的處理順序。最後，我們會討論筆記型的物理安全性。我們也會研究這些設備的結構，安全電纜的正確安裝以及如何將他們連接到筆記型電腦。 \n Battery Types\xa0\xa0 電池類型 \n Laptops and notebooks can receive power from several different types of batteries. The batteries are used to provide direct current (DC) to your notebook, and the batteries are then recharged by the alternating current (AC) adapter that connects your notebook to the wall outlet. The AC adapter actually works as a transformer, converting the wall outlet’s high-voltage AC into low-voltage DC that your notebook uses to charge its battery. \n 筆記型電腦和筆記型電腦可以透過很多種不同類型的電池提供電源。 電池用於筆記型電腦提供直流（DC），然後再透過將筆記本電腦連接至牆上插座的交流（AC）適配器為電池充電。 交流適配器實際上充當變壓器，將牆壁裝電源插座的高壓AC轉換為筆記本計算機用來為其電池充電的低壓DC。 \n \n The notebook battery is an enclosed plastic casing with individual battery cells on the inside, as shown in the images above. Older notebooks used either nickel-cadmium (NiCd or NiCad) or nickel-metal hydride (NiMH) batteries. These types of batteries are seldom used in modern notebooks and laptops because they suffered from what is termed the “memory effect.” Basically, the “memory effect” occurs when a battery loses its capacity to fully recharge if it is discharged repeatedly the same amount and then recharged without being fully drained first. For example, if every time your notebook battery’s charge was at 20 percent you went and recharged it, then 20 percent charge would become the new zero for your battery, reducing the overall charge available to only 80 percent of the original capacity. \n 筆記型電腦的電池是一個封閉的塑料外殼，內部裝有單個電池，如上圖所示。 較舊的筆記型電腦使用鎳鎘（NiCd或NiCad）或鎳氫（NiMH）電池。 這些類型的電池很少用於現代的筆記型電腦，因為它們受到了所謂的“記憶效應”。 基本上，如果反覆放電相同量的電池而失去其完全充電的能力，則發生“記憶效應”，然後先充電而又沒有完全耗盡。 例如，如果你每次筆記型電池的電量為20％時都要去充電，那麼20％的電量將成為電池的0％，從而將總可用電量減少到原始容量的80％。 \n Both of these battery types were replaced with lithium-ion batteries. The lithium-ion batteries do not suffer from the memory effect issue. They perform better than other types of batteries, and are lighter in weight, which increases a notebook’s mobility. Lithium-ion batteries also feature a rapid-charging option that allows faster charging when the user is in a hurry. These batteries are more environmentally friendly than the previous types, as well. \n 這兩種電池都被鋰離子電池取代。 鋰離子電池不會受到記憶效應問題。 它們的性能比其他類型的電池更好，而且重量更輕，這增加了筆記本的移動性。 鋰離子電池還具有快速充電選項，當用戶急忙時可以更快地充電。 這些電池也比以前的電池更環保。 \n To best care for your notebook or laptop, always use the approved battery type for your model. Using unapproved batteries in your notebook can lead to the notebook catching fire or exploding. In order to maintain notebook batteries at peak operating efficiency, keep the batteries at room temperature and avoid heat. If your notebook has a full charge and is subjected to high temperatures, the longevity of your battery will decrease. Batteries deteriorate over time, so purchase one with the most recent manufacturing date for the longest life. Also, getting a higher-capacity battery will provide a longer battery life on a given charge. Since lithium-ion batteries do not have a memory effect, it is often better to use partial-discharge cycles for notebooks and laptops that use those batteries. Note, while there is no memory effect, some lithium-ion batteries suffer from a “digital memory” that decreases the accuracy of the power gauge. To recalibrate the power gauge, you need to fully discharge the battery routinely, such as every few months, then completely recharge it. Lastly, if you are planning on storing your notebook for a while, it is best to discharge the battery to about 50 percent first, then store it in a cool, dry place. This will prolong the life of the battery and prevent you from having to waste money on a replacement. \n 為了最好地保護筆記型電腦，必須常常為你的型號使用認可的電池類型。 在筆記型電腦中使用未經許可的電池可能會導致筆記本計算機著火或爆炸。 為了使筆記型電腦的電池保持最高工作效率，請將電池保持在室溫下並避免發熱。 如果你的筆記型電腦充滿電並且處於高溫下，則電池的壽命會降低。 電池會隨著時間的經過而變質，因此請購買製造日期離最近的電池以延長使用壽命。 同樣地，在給定的電量下，使用容量更大的電池將提供更長的電池壽命。 由於鋰離子電池沒有記憶效應，因此對於使用這些電池的筆記型電腦，最好使用部分放電循環。 注意， 雖然沒有記憶效應，但是一些鋰離子電池會受到“數字記憶”的困擾，這會降低功率計的精度。 要重新校準功率計，你需要定期（例如每幾個月一次）對電池完全放電，然後將其完全充電。 最後，如果你打算將筆記型電腦存放一段時間，則最好先將電池放電約50％，然後將其存放在陰涼乾燥的地方。 這樣可以延長電池壽命，並可以避免你在更換電池時浪費金錢。 然後完全充電。 \n The amount of battery life is indicated in a number of ways in a notebook, depending on the computer model. All modern operating systems provide a digital gauge inside the operating system. This indication can be set by the user to show either the percentage of battery life remaining (such as 53 percent left), the time remaining until the battery runs out (such as 1 hour, 43 minutes to empty), or the time to full charge (such as 34 minutes to full charge). Some models of batteries, though, have a battery gauge included on the battery itself. This will use a scale, such as five circles that will light up to show the remaining life of the battery. \n 根據筆記型電腦的型號，筆記型電腦可以透過很多種方式指示電池壽命。 所有現代操作系統都在操作系統內部提供數字量規。 用戶可以設置此指示以顯示剩餘電池壽命百分比（例如剩餘53％），直到電池用完的剩餘時間（例如1小時43分鐘用完）或充滿時間充電（例如充滿電需要34分鐘）。 但是，某些型號的電池在電池本身中附帶一個電池電量計。 這將會使用一個刻度，例如五個圓圈，它將點亮以顯示電池的剩餘壽命。 \n \n \n AC Power\xa0交流電源 \n As previously stated, the battery is used to provide direct current to your notebook and the battery is then recharged by the AC adapter that connects your laptop to the wall outlet. While the battery directly powers the notebook’s components, much like a power supply in a desktop, the battery doesn’t perform any transformation of the power it receives or sends out. These functions are handled by the AC adapter. Many docking stations provide the ability to either use the regular AC adapter as their power source, or use a built-in AC adapter to perform the transformation of the power from AC to DC. If the laptop is using a docking station, it still uses the battery to provide power to the laptop, and the docking station to charge the laptop’s battery. A\xa0 port replicator \xa0 , on the other hand, requires the AC adapter to perform the transformation for it. \n 如前所述，電池用於向筆記型電腦提供直流電，然後通過將筆記型電腦連接至牆上插座的交流適配器為電池充電。儘管電池可以直接為筆記型電腦的組件提供電，就像台式機中的電源一樣，但電池不會對其接收或發出的功率進行任何轉換。這些功能由交流適配器處理。許多擴展塢都可以使用常規的AC適配器作為電源，也可以使用內置的AC適配器執行從AC到DC的電源轉換。如果方便攜帶筆記型電腦正在使用擴展塢，它仍將使用電池為便攜式計算機供電，並使用擴展塢為便攜式計算機的電池充電。一個 \xa0 端口復制器 \xa0 而另一方面，要求AC適配器為其執行轉換。 \n \n Docking stations are used to add capabilities to a laptop and create a "desktop" experience. For example, in the image above, you can see that the docking station has numerous USB ports, a PS/2 port for keyboard/mouse, a modem port, Ethernet port, VGA and DVI display outputs, audio input and output ports, as well as serial and parallel connections. Some docking stations even have built-in hard drives and optical drives for additional storage. A port replicator, on the other hand, only provides the same ports that already exist on the laptop. This is used for quick connection and disconnection to the various external devices when the laptop is returned to the office environment. \n \n \n \n 擴展塢用於筆記型電腦添加功能並創建“桌面”體驗。例如，在上圖中，你可以看到擴展塢具有多個USB端口，一個用於鍵盤/鼠標的PS / 2端口，一個調製解調器端口，以太網端口，VGA和DVI顯示輸出，音頻輸入和輸出端口，如以及串行和並行連接。某些擴展塢甚至具有內置硬盤驅動器和光盤驅動器，用於額外存儲。另一方面，端口復制器僅提供筆記本電腦上已經存在的相同端口。當筆記型電腦返回辦公環境時，可用於快速連接和斷開與各種外部設備的連接。 \n \n Proper Disposal Procedures\xa0正確的處置程序 \n Rechargeable laptop batteries contain hazardous materials such as mercury, cadmium, and lead. Many states have laws governing the disposal of batteries containing toxic materials. Often disposing of them in the trash and sending them to a landfill is illegal. Recycling, sometimes referred to as eCycling in the case of computers and other electronics, reduces the amount of toxic elements entering the waste stream and is often the required or preferred disposal method. Recycling saves landfill space, conserves our natural resources, and reduces the amount of electronic waste generated by residents in the state. For example, according to the State of Maryland, eCycling reduces more than 150,000 tons of waste every year. Local regulations (state, county, or city) dictate the proper methods of disposing of the physical laptop and its components. \n 筆記型電腦可以充電電池包含有害物質，例如汞，鎘和鉛。 許多的州都有管理含毒物質電池處置的法律。 通常，將它們丟棄在垃圾桶中並送到垃圾填埋場是非法的。 回收，有時在計算機和其他電子設備中稱為“循環”，可減少進入廢物流的有毒元素的數量，這些通常是必需或首選的處置方法。 回收利用可節省垃圾填埋場的空間，節約我們的自然資源，並減少該州居民產生的電子廢物量。 例如，據馬里蘭州稱，電子騎車每年可減少15萬噸以上的廢物。 當地法規（州，縣或市）規定了處置物理筆記型電腦及其組件的正確方法。 \n If, instead of disposing of the entire laptop, you wish to sell the device, you should first remove your personal information from the laptop. The best way to do this is to perform a hard drive format using overwrite software. This is also known as a “secure erase,” where every portion of the hard disk is rewritten with a “0” in order to fully clear your personal data from the device. Then, if necessary, you can reinstall the operating system and sell the device. \n 如果你想出售設備而不是丟棄整個筆記型電腦，則應該首先從筆記型電腦中刪除個人訊息。 最好的方法是使用覆蓋軟體執行硬盤驅動器格式。 這也稱為“安全擦除”，其中硬碟的每個部分都用“ 0”重寫，以便從設備中完全清除你的個人數據。 然後，如果有必要，你可以重新安裝操作系統並出售設備。 \n \n Security\xa0安全 \n Security cables are used to ensure that laptops are not physically removed from a particular area. Security cables are constructed much like a bicycle security lock, with a thick, carbon strengthened steel or metal cable that has a loop on one end and a lock on the other. The lock end has a T-shaped head that is inserted into the Kensington security slot on the computer (named after the first company to produce these locks). The locks are set using either a key or a combination-style lock. The other end, with the loop, can then be secured to a stationary device, like a pole or the desk itself. Often, these are installed by looping the lock end through the loop end, as it goes around a portion of the desk, securing the security lock to a location on the desk. Some security cables also have an audible alarm feature that alerts when someone tries to force the lock. Remember that these physical security measures only work when used properly. Tether a laptop to a strong, unbreakable, non-movable object. \n 安全電纜適用於確定未從特定區域物理移除便筆記型電腦。 安全纜線的結構很像自行車安全鎖，由一根粗的碳增強的鋼或金屬纜線組成，該纜線的一端有一個環，另一端有一個鎖。 鎖端有一個T形頭，該頭插入計算機上的Kensington安全插槽（以生產這些鎖的第一家公司的名字命名）。 可以使用鑰匙或組合鎖來設置鎖。 然後可以將帶有環的另一端固定到固定裝置，例如桿子或桌子本身。 通常，通過將鎖端繞在桌子的一部分周圍，將鎖端穿過環形端進行安裝，從而將安全鎖固定到桌子上的某個位置，從而進行安裝。 一些安全電纜還具有聲音警報功能，當有人試圖強行鎖定時會發出警報。 請記住，這些物理安全措施只有在正確使用後才能起作用。 將筆記本電腦系在堅固，不可移動的物體上。 \n \n \n \n', 'tags': '', 'url': 'PCH 19\xa0 Notebook Power and Physical Security.html'}, {'title': 'w7 kaggle', 'text': 'https://www.kaggle.com/yulin0922/cp2020w7 \n', 'tags': '', 'url': 'w7 kaggle.html'}, {'title': 'w8 kaggle', 'text': 'https://www.kaggle.com/yulin0922/cp2020w8 \n', 'tags': '', 'url': 'w8 kaggle.html'}, {'title': 'homework2', 'text': '如何分組 \n https://www.kaggle.com/yulin0922/cp2020-hw2/edit/run/48153476 \n 方法1 \n from random import shuffle  #隨機導入洗牌 list  #清單  =  [ 40523138 , 40523148 , 40723217 , 40728238 , 40823148 , 40823152 , 40923201 , 40923202 , 40923203 , 40923204 , 40923205 , 40923206 , 40923207 , 40923208 , 40923209 , 40923210 , 40923211 , 40923212 , 40923213 , 40923214 , 40923216 , 40923217 , 40923218 , 40923219 , 40923220 , 40923221 , 40923223 , 40923224 , 40923225 , 40923226 , 40923227 , 40923228 , 40923229 , 40923230 , 40923231 , 40923232 , 40923233 , 40923234 , 40923235 , 40923236 , 40923237 , 40923238 , 40923239 , 40923240 , 40923241 , 40923242 , 40923243 , 40923244 , 40923245 , 40923246 , 40923247 , 40923248 , 40923249 , 40923250 , 40923251 , 40923252 , 40923253 ] shuffle(list)  #隨機出現(列表) n =  5 #數量(分組) m = int(len(list)/n)  #int(len(清單)/n) list2 =  [] for  #清單2 =  [] 給 i in range(0，len(list[i:i+m])  #在範圍內(0，len(list)， m) list2.append(list [i:i+m])  #清單2.附加(清單 [i:i+m]) print(list2)  #顯示出來(清單2) \n 方法2 \n from random import shuffle  #隨機導入洗牌 list  #清單  =  [ 40523138 , 40523148 , 40723217 , 40728238 , 40823148 , 40823152 , 40923201 , 40923202 , 40923203 , 40923204 , 40923205 , 40923206 , 40923207 , 40923208 , 40923209 , 40923210 , 40923211 , 40923212 , 40923213 , 40923214 , 40923216 , 40923217 , 40923218 , 40923219 , 40923220 , 40923221 , 40923223 , 40923224 , 40923225 , 40923226 , 40923227 , 40923228 , 40923229 , 40923230 , 40923231 , 40923232 , 40923233 , 40923234 , 40923235 , 40923236 , 40923237 , 40923238 , 40923239 , 40923240 , 40923241 , 40923242 , 40923243 , 40923244 , 40923245 , 40923246 , 40923247 , 40923248 , 40923249 , 40923250 , 40923251 , 40923252 , 40923253 ] shuffle(list)  #隨機出現(列表) \n step = 11  #數量(人數) b =   [list [i:i+step ] for i in  #b = [清單 [i:i+step ] for i in range(0，len(list)，step) ]  ＃ 範圍 ( 0 , len（清單） 數量 )] \n print ( b )  ＃顯示出來 （b) \n', 'tags': '', 'url': 'homework2.html'}, {'title': 'homewor3', 'text': '', 'tags': '', 'url': 'homewor3.html'}, {'title': '8 Rock Paper Scissors', 'text': 'Make a two-player Rock-Paper-Scissors game. ( Hint: Ask for player plays (using \xa0 input ), compare them, print out a message of congratulations to the winner, and ask if the players want to start a new game ) \n 製作兩人石頭剪刀布遊戲。（ 提示：（使用 input ） 詢問玩家玩法 ，進行比較，打印出對獲勝者表示祝賀的消息，並詢問玩家是否要開始新遊戲 ） \n Rmember the rules: \n \n Rock beats scissors \n Scissors beats paper \n Paper beats rock\xa0 \n \n 記住規則： \n \n 石頭贏剪刀 \n 剪刀贏布 \n 布贏石頭 \n \n Disussion 討論 \n \xa0 Concepts for this week: \n \n While loops \n Infinite loops \n Break statements \n \n \xa0本週的概念： \n \n While循環 \n 無限循環 \n 中斷聲明 \n \nWhile loops\n We have already discussed \xa0 for \xa0 loops, or loops that look sequentially (one by one) at elements in a list. There is a second type of loop that works in a slightly different way called a \xa0 while \xa0 loop. \n The idea is simple: while a certain condition is \xa0 True , keep doing something. For example: \n While循環 \n 我們已經討論過 for 循環，或循環（逐一）查看列表中的元素的循環。 還有第二種類型的循環，其工作方式略有不同，稱為 while 循環。 \n 這個想法很簡單：在一定條件下 True ，繼續做某事。 例如： \n \xa0 \xa0\xa0 a  =   5 \n \xa0 \xa0  \xa0while   (a >  0 ): \n \xa0 \xa0 \xa0 \xa0 print (a) \n \xa0 \xa0 \xa0 \xa0a  - =   1 \n \n The output of this code segment is: \n 該代碼段的輸出為： \n    5 \n   4 \n   3 \n   2 \n   1 A particularly useful way to use\xa0 while \xa0loops is checking user input for correctness. For example: 使用 while 循環的一種特別有用的方法是檢查用戶輸入的正確性。例如： \n    quit   =   input ( \'Type "enter" to quit:\'   ) \n    while   quit   !=   "enter" : \n     quit   =   input ( \'Type "enter" to quit:\'   ) The uses for this are infinite, and can (and should!) be combined with conditionals to yield the most efficient results. 此方法的用途是無限的，並且可以（並且應該！）與條件條件結合使用以產生最有效的結果。 infinite loops  無限循環 An infinite loop is a loop that never stops. This means that the condition in the beginning of the while loop will always be true. 無限循環是永不停止的循環。 這意味著while循環開始時的條件將始終為true。 For example: 例如： \n    i   =   5 \n   while   i   >   0 : \n     print ( "Inside the loop" ) What will happen is the loop will print out the phrase “Inside the loop” forever and ever. If you are running your computer, you will have to “kill the program” to stop it. Each operating system has a different way of “killing a program” to get out of an infinite loop. 將會發生的是，循環將永遠打印出短語“ Inside the loop”。 如果您正在運行計算機，則必須“殺死該程序”以將其停止。 每個操作系統都有不同的“殺死程序”的方法來擺脫無限循環。 On Linux: in the terminal, type “CTRL-C” to kill the program that is currently running in the terminal. If you are using the IDLE Python IDE, then you must press “CTRL-D” to exit your running program. When in doubt, do a Google search before you start programming! 在Linux上：在終端中，鍵入“ CTRL-C”以終止終端中當前正在運行的程序。 如果使用的是IDLE Python IDE，則必須按“ CTRL-D”退出正在運行的程序。 如有疑問，請在開始編程之前進行Google搜索！ On Windows: type “CTRL-ALT-DEL” and open the task manager to kill the program. 在Windows上：鍵入“ CTRL-ALT-DEL”並打開任務管理器以終止程序。 On Mac: right-click on the task, and kill the program that is running forever. 在Mac上：右鍵單擊該任務，然後終止永久運行的程序。 If you find yourself in an infinite loop, your program will never end. 如果發現自己陷入無限循環，則程序將永遠不會結束。 Break \xa0 statements 中斷聲明 A\xa0 break \xa0 statement stops the execution of a loop before the original condition is met. While the use of a \xa0 break \xa0 statement will often start an argument about good coding practices, sometimes it is useful. break 在滿足原始條件之前， 一條 語句將停止執行循環。 儘管使用 break 語句通常會引發有關良好編碼實踐的爭論，但有時它很有用。 For example: 例如： \n    while   True :  \n     usr_command   =   input ( "Enter your command: " ) \n     if   usr_command   ==   "quit" : \n       break \n     else :  \n       print ( "You typed "   +   usr_command ) \n In this case, the \xa0 break \xa0 statement is used to break off the “infinite while loop” that we have constructed with the \xa0 while True \xa0 statement. \n 在這種情況下，該 break 語句用於中斷我們使用該 while True 語句 構造的“無限while循環” \xa0 。 \n', 'tags': '', 'url': '8 Rock Paper Scissors.html'}, {'title': '13\xa0Fibonacci', 'text': 'exercise 13 (and solution) 練習13(解決例題) \n Write a program that asks the user how many Fibonnaci numbers to generate and then generates them. Take this opportunity to think about how you can use functions. Make sure to ask the user to enter the number of numbers in the sequence to generate.( Hint: The Fibonnaci seqence is a sequence of numbers where the next number in the sequence is the sum of the previous two numbers in the sequence. The sequence looks like this: 1, 1, 2, 3, 5, 8, 13, … ) \n 編寫一個程序，問用戶需要生成多少斐波那契數字，然後生成它們。藉此機會考慮如何使用功能。請確保要求用戶輸入要生成 的序列中的數字 。（ 提示：Fibonnaci序列是數字序列，其中序列中的下一個數字是序列中前兩個數字的和。該序列看起來像這樣：1、1、2、3、5、8、13… ） \n Sample solution 例題 \n There are so many ways that you can use functions to generate Fibonacci numbers. Here is one user-submitted solution: \n 你可以通過多種方式使用函數來生成斐波那契數。 這是用戶提交的一種解決方案： \n def gen_fib():\n    count = int(input("How many fibonacci numbers would you like to generate? "))\n    i = 1\n    if count == 0:\n        fib = []\n    elif count == 1:\n        fib = [1]\n    elif count == 2:\n        fib = [1,1]\n    elif count > 2:\n        fib = [1,1]\n        while i < (count - 1):\n            fib.append(fib[i] + fib[i-1])\n            i += 1\n\n    return fib and another 另一個 \n def fibonacci():\n    num = int(input("How many numbers that generates?:"))\n    i = 1\n    if num == 0:\n        fib = []\n    elif num == 1:\n        fib = [1]\n    elif num == 2:\n        fib = [1,1]\n    elif num > 2:\n        fib = [1,1]\n        while i < (num - 1):\n            fib.append(fib[i] + fib[i-1])\n            i += 1\n    return fib\nprint(fibonacci())\ninput() \n This solution is using what is called the “iterative” method of computing Fibonacci numbers. This means you use some kind of loop to keep adding numbers together to get the next number. \n 該解決方案使用了所謂的計算斐波納契數的“重複”方法。 這意味著您使用某種循環來將數字加在一起以獲得下一個數字。 \n An alternative way of computing Fibonacci numbers is to use \xa0 recursion , or calling the same function over and over in a special way, to compute the Fibonacci numbers. We will talk about this in a future exercise. \n 計算斐波那契數的另一種方法是使用 遞歸 ，或以一種特殊的方式反複調用相同的函數來計算斐波那契數。 我們將在以後的練習中討論這一點。 \n', 'tags': '', 'url': '13\xa0Fibonacci.html'}, {'title': '20 element search 元素搜尋', 'text': 'exercise 20 (and solution) 練習20 (解決例題) \n Write a function that takes an ordered list of numbers (a list where the elements are in order from smallest to largest) and another number. The function decides whether or not the given number is inside the list and returns (then prints) an appropriate boolean. \n 編寫一個函數，該函數接受一個有序的數字列表（一個元素從最小到最大的順序列表）和另一個數字。 該函數確定給定的數字是否在列表內，並返回（然後打印）適當的布爾值。 \n Extras: 附加功能: \n \n Use binary search.\xa0\xa0 使用二進制搜索。 \n \n Discussion 討論 \n Topics: \n \n Booleans - True and False \n Equality testing \n Binary search \n \n 主題： \n \n 布爾值-對與錯 \n 平等測試 \n 二進制搜索\xa0\xa0 \n \n Booleans \n When you are writing programs, there is often a time when you need to make a decision about something based on the truthfulness of something else. Basically, you need to make a decision based on whether something is TRUE or something is FALSE. \n 在編寫程序時，通常會需要根據其他事物的真實性來做出決策。 基本上，您需要根據某物是TRUE還是FALSE來做出決定。 \n An obvious example is when using conditionals:\xa0 \n 一個明顯的例子是使用條件句時： \n michele_age   =   22 \n   truth_value   =   michele_age   >   17 \n   if   ( truth_value ): \n     print ( "Michele can see a rated R movie" ) \n (We talked about this idea of conditionals in \xa0 a previous post .) \n （我們在上 一篇文章中 討論了這種條件條件的概念 。） \n But what is happening behind the scenes is that the statement \xa0 michele_age > 17 \xa0 is being evaluated into a type that is either \xa0 True \xa0 or \xa0 False . This is then getting stored inside the variable \xa0 truth_value , and then the decision is being made inside the conditional. \n Here is another example: \n 但是幕後發生的事情是該語句 michele_age > 17 正在被評估為 True or或類型 False 。然後將其存儲在變量中 truth_value ，然後在條件中進行決策。 \n 這是另一個示例： \n   while   True : \n     age   =   input ( "How old are you? " ) \n     if   age   >=   17 :  \n       print ( "can see a rated R movie" ) \n     elif   age   <   17   and   age   >   12 : \n       print ( "can see a rated PG-13 movie" ) \n     else :  \n       print ( "can only see rated PG movies" ) What the\xa0 while True \xa0 statement does at the beginning of the code segment is continue asking for an age and printing a response - it never stops. (To stop it, press CTRL-C in a terminal or in the Python shell). \n 該 while True 語句在代碼段開頭的作用是繼續詢問年齡並打印響應-它永遠不會停止。 （要停止它，請在終端或Python Shell中按CTRL-C）。 \n These types -\xa0 True \xa0 and \xa0 False \xa0 are called \xa0 boolean \xa0 types or \xa0 boolean \xa0 variables. They can only take on two values, either \xa0 True \xa0 or \xa0 False . \n 這些類型的- True 和 False 被稱為 布爾 類型或 布爾 變量。它們只能採用 True 或的兩個值 False 。 \n 要更廣泛地了解Python布爾值，請查看這些資源 。 \n Equality testing on strings\xa0 字符串相等性測試 \n Scenarios come up with where you need to test if things are equal to each other numbers or something else .We covered this idea in a previous post ,but it is worth returning to again,this time for strings. \n \n 在場景中，您需要測試事物是否彼此相等-數字或字符串或其他。我們在上 一篇文章中 介紹了這個想法 ，但是這次還是值得再來一次。 Remember, comparing numbers for equality is done with an\xa0 == \xa0 sign, like so: 請記住，比較數字是否相等是用一個 == 符號 完成的 ，如下所示： \n   age   =   21 \n   if   age   ==   21 : \n     print ( "You are 21!" ) \n   elif   age   >   21 : \n     print ( "You\'re old." ) \n   else : \n     print ( "Young one!" ) Turns out, comparing strings is equally (hehe..) simple, using a\xa0 == \xa0 to check for equality and \xa0 != \xa0 to check for inequality. 事實證明，使用a == 來檢查相等性和 != 檢查 不相等性，比較字符串同樣簡單（嘿，..） 。 \n password   =   "unsafepassword" \n   if   password   ==   "unsafepassword" : \n     print ( "You may enter." ) \n   else : \n     print ( "Try again!" ) Or, a more practical password-checking piece of code: 或者，使用更實用的密碼檢查代碼： \n    real_password   =   "unsafepassword" \n   user_password   =   input ( "Enter the password: " ) \n   while   user_password   !=   real_password : \n     user_password   =   input ( "Enter the password: " ) \n   print ( "You may enter!" ) \n Binary search  \n There are a number of ways to search for elements in a list, and there is no one correct way to do so. The point of this exercise is to get you thinking about possible ways to search for elements in the list, in an entire sequence of exercises about lists, searching, and sorting. This exercise might seem silly and easy at first, but the more you dive into this topic, the more difficult it becomes. \n 有多種方法可以搜索列表中的元素，但沒有一種正確的方法可以搜索列表中的元素。 該練習的目的是讓您思考有關列表，搜索和排序的整個練習序列中搜索列表中元素的可能方法。 剛開始時，此練習可能看起來很愚蠢且容易，但是您越深入該主題，就越困難。 \n The word “binary” means there are two choices (in computers, often this is 0 or 1, but it really means any choice between two things). “Search” is to look for something. So the main idea behind binary search is to look for something in a way that gives you a decision tree for where to look, containing two choices. Let me give you an example: “二進制”一詞表示有兩種選擇（在計算機中，通常為0或1，但實際上表示在兩種情況之間可以選擇）。 “搜索”是尋找東西。 因此，二進制搜索背後的主要思想是以某種方式查找內容，該方式可以為您提供決策樹，以查找位置，其中包含兩個選擇。 讓我舉一個例子： \n Let’s take the list\xa0 a = [1, 3, 5, 30, 42, 43, 500] . It is an “ordered list”, or a list where the elements in the list go from smaller to larger. Let’s say we want to know whether the element \xa0 9 \xa0 is in the list or not. Here is what we do: \n 讓我們看一下清單 a = [1, 3, 5, 30, 42, 43, 500] 。它是一個“有序列表”，或者是列表中元素從小到大的列表。假設我們想知道元素 9 是否在列表中。這是我們的工作： \n \n Look at the middle element in the list - it is ‘30’. * ‘9 < 30’, so let us ignore the elements to the right of ‘30’. \n The new list we are looking at is now \xa0 [1, 3, 5] . \n Look at the middle element in this new list - it is \xa0 3 . \n ‘9 > 3’, so ignore the elements to the left of \xa0 3 . \n The new list we are looking at is \xa0 [5] . \n The list has one element and it is not \xa0 9 . \n 9 \xa0 is not in the list. \n \n \n 查看列表中的中間元素-它是“ 30”。*\'9 <30\'，因此讓我們忽略\'30\'右邊的元素。 \n 現在我們正在查看的新列表 [1, 3, 5] 。 \n 看一下這個新列表的中間元素-是 3 。 \n \'9> 3\'，因此忽略左側的元素 3 。 \n 我們正在查看的新列表是 [5] 。 \n 該列表只有一個元素，而沒有 9 。 \n 9 \xa0 不在列表中。 \n \n What the example shows is that in an ordered list, knowing how the element you are looking for compares to another element in the list splits the list in two - one half where the element can be, and one where it definitely cannot be. In the case where our list contains millions of elements, knowing that we can cut the “search space” in half is a great increase in efficiency. \n 該示例顯示的是，在有序列表中，知道要查找的元素與列表中另一個元素的比較方式，將列表分為兩部分-元素可以位於其中一半，而絕對不能位於其中。 在我們的列表包含數百萬個元素的情況下，知道我們可以將“搜索空間”減少一半，這將大大提高效率。 \n When you are writing the solution, first try to write it without binary search. Then when you want to try implementing binary search, write a separate function. In the solution I will give an example for how to write a binary search in Python. \n 在編寫解決方案時，請首先嘗試在不進行二進制搜索的情況下編寫它。然後，當您想嘗試實現二進制搜索時，編寫一個單獨的函數。在解決方案中，我將給出一個示例，說明如何使用Python編寫二進制搜索。 \n \n \n \n', 'tags': '', 'url': '20 element search 元素搜尋.html'}]};